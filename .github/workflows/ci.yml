name: Awade CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Documentation and Validation
  validate:
    name: üìö Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install -r scripts/requirements.txt
        pip install fastapi uvicorn pydantic
        
    - name: Run documentation validation
      run: |
        python scripts/update_api_docs.py
        python scripts/mcp_health_check.py --save
        
    - name: Check for required files
      run: |
        test -f README.md
        test -f docs/internal/api-contracts.md
        test -f docs/internal/requirements.md
        test -f docs/api/README.md
        test -f AI_USE_POLICY.md
        echo "‚úÖ All required documentation files present"
        
    - name: Validate MCP configuration
      run: |
        test -f .cursor/mcp.json
        python -m json.tool .cursor/mcp.json
        echo "‚úÖ MCP configuration is valid"

  # Backend Testing
  backend-test:
    name: üîß Backend Tests
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install backend dependencies
      run: |
        cd apps/backend
        pip install -r requirements.txt
        
    - name: Install contract testing dependencies
      run: |
        pip install -r scripts/requirements.txt
        
    - name: Run backend tests
      run: |
        cd apps/backend
        python -m pytest tests/ -v || echo "‚ö†Ô∏è  No tests found yet"
        
    - name: Check API documentation
      run: |
        python scripts/update_api_docs.py
        test -f apps/backend/app/openapi.json || echo "‚ö†Ô∏è  No API spec generated yet"

  # Frontend Testing (if exists)
  frontend-test:
    name: üé® Frontend Tests
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Ensure package-lock.json exists
      run: |
        if [ ! -f apps/frontend/package-lock.json ]; then
          echo "‚ùå apps/frontend/package-lock.json is missing. Please run 'npm install' in apps/frontend and commit the lockfile." && exit 1
        fi
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd apps/frontend
        npm ci || echo "‚ö†Ô∏è  No package.json found"
        
    - name: Run frontend tests
      run: |
        cd apps/frontend
        npm test || echo "‚ö†Ô∏è  No tests configured yet"
        
    - name: Build frontend
      run: |
        cd apps/frontend
        npm run build || echo "‚ö†Ô∏è  No build script found"

  # Documentation Coverage
  doc-coverage:
    name: üìö Documentation Coverage
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Run documentation coverage analysis
      run: |
        python scripts/doc_coverage.py --save
        
    - name: Generate HTML dashboard
      run: |
        python scripts/generate_coverage_dashboard.py
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: doc-coverage-reports
        path: |
          logs/doc_coverage_report.json
          logs/coverage_dashboard.html
        retention-days: 30
        
    - name: Check coverage threshold
      run: |
        python -c "
        import json
        with open('logs/doc_coverage_report.json', 'r') as f:
            report = json.load(f)
        coverage = report['coverage_percentage']
        if coverage < 70:
            print(f'‚ùå Documentation coverage {coverage:.1f}% is below 70% threshold')
            exit(1)
        else:
            print(f'‚úÖ Documentation coverage {coverage:.1f}% meets threshold')
        "

  # Contract Testing
  contract-test:
    name: üìã Contract Tests
    runs-on: ubuntu-latest
    needs: [validate, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install contract testing dependencies
      run: |
        pip install -r scripts/requirements.txt
        pip install uvicorn
        cd apps/backend
        pip install -r requirements.txt
        
    - name: Run contract tests
      run: |
        python scripts/contract_testing.py --base-url http://localhost:8000 --start-server --save
        
    - name: Upload contract test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: contract-test-report
        path: logs/contract_test_report.json
        retention-days: 30

  # Security and Quality Checks
  security:
    name: üîí Security & Quality
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive files
      run: |
        if git ls-files | grep -E '\.(env|key|pem|p12)$'; then
          echo "‚ùå Sensitive files detected in repository"
          exit 1
        else
          echo "‚úÖ No sensitive files found"
        fi
        
    - name: Check for hardcoded secrets
      run: |
        if grep -r "password\|secret\|key\|token" --include="*.py" --include="*.js" --include="*.md" . | grep -v "example\|test\|TODO"; then
          echo "‚ö†Ô∏è  Potential hardcoded secrets found - review manually"
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi
        
    - name: Validate environment template
      run: |
        test -f .env.example
        echo "‚úÖ Environment template present"

  # Deployment (on main branch only)
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [validate, backend-test, frontend-test, contract-test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install deployment dependencies
      run: |
        pip install -r scripts/requirements.txt
        
    - name: Generate deployment artifacts
      run: |
        # Create deployment package
        mkdir -p dist
        cp -r apps/backend dist/
        cp -r packages dist/
        cp -r docs dist/
        cp README.md dist/
        cp AI_USE_POLICY.md dist/
        cp LICENSE.md dist/
        cp .env.example dist/
        
        # Generate final health report
        python scripts/mcp_health_check.py --save
        
        echo "‚úÖ Deployment artifacts created"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: awade-deployment
        path: dist/
        retention-days: 30
        
    - name: Notify deployment
      run: |
        echo "üöÄ Awade deployment ready!"
        echo "üì¶ Artifacts uploaded to GitHub Actions"
        echo "üìä Health report: logs/mcp_health.json"

  # Summary and Notifications
  summary:
    name: üìä Summary
    runs-on: ubuntu-latest
    needs: [validate, backend-test, frontend-test, contract-test, security, deploy]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate summary
      run: |
        echo "## üéâ Awade CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Completed Jobs:" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.validate.result }}" == "success" ]; then
          echo "- ‚úÖ Documentation validation" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Documentation validation" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-test.result }}" == "success" ]; then
          echo "- ‚úÖ Backend tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Backend tests" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.frontend-test.result }}" == "success" ]; then
          echo "- ‚úÖ Frontend tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Frontend tests" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.contract-test.result }}" == "success" ]; then
          echo "- ‚úÖ Contract tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Contract tests" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security.result }}" == "success" ]; then
          echo "- ‚úÖ Security checks" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Security checks" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "- ‚úÖ Deployment ready" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review any warnings or failures" >> $GITHUB_STEP_SUMMARY
        echo "2. Check deployment artifacts if available" >> $GITHUB_STEP_SUMMARY
        echo "3. Update documentation if needed" >> $GITHUB_STEP_SUMMARY 